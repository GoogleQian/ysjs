<?xml version="1.0" encoding="UTF-8"?>
<!-- 默认为 <configuration scan="true" scanPeriod="60 seconds" debug="false"> -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="false">
<!--/opt/smart-thermometer/api/logs-->
	<property name="LOG_PATH" value="/opt/znss/wechat/logs" />
	<property name="LOG_FILE_NAME" value="znss-wechat" />

	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{80} %L - %msg%n
			</Pattern>
		</encoder>
	</appender>

	<!-- 这个appender是每天生成一个日志文件，并且只保留30天 -->
	<!-- 滚动输出到文件，达到一定条件时，会将日志记录到其他文件 -->
	<appender name="fileout"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 滚动策略。具体策略由class指定。 -->
		<!-- TimeBasedRollingPolicy是最常用的滚动策略，根据时间滚动，当达到一定时间时，自动重新开辟一个日志文件 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 由于表达式中最小单位为天，所以每天生成一个日志文件，且以此命名 -->
			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}-%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<!-- 保留归档文件的最大数量。 -->
			<!-- 本例中由于使用了时间作为滚动策略，且fileNamePattern中最小单位为天，所以归档文件保存30天，超过30天将被删除 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}
				%L - %msg%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<root level="INFO">
		<appender-ref ref="fileout" />
		<appender-ref ref="stdout" />
	</root>

</configuration>